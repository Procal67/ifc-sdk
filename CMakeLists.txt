cmake_minimum_required(VERSION 2.4)

PROJECT(ifc2x3_sdk)
    
IF(UNIX AND NOT WIN32 AND NOT APPLE)
  IF(CMAKE_SIZEOF_VOID_P MATCHES "8")
      SET(LIB_POSTFIX "64")
      MARK_AS_ADVANCED(LIB_POSTFIX)
  ENDIF(CMAKE_SIZEOF_VOID_P MATCHES "8")
ENDIF(UNIX AND NOT WIN32 AND NOT APPLE)
IF(NOT DEFINED LIB_POSTFIX)
    SET(LIB_POSTFIX "")
ENDIF(NOT DEFINED LIB_POSTFIX)

# The CMake version number.
SET(ifc2x3_sdk_VERSION_MAJOR 1)
SET(ifc2x3_sdk_VERSION_MINOR 0)
SET(ifc2x3_sdk_VERSION_PATCH beta3)
SET(ifc2x3_sdk_VERSION "${ifc2x3_sdk_VERSION_MAJOR}.${ifc2x3_sdk_VERSION_MINOR}")
SET(ifc2x3_sdk_VERSION_FULL "${ifc2x3_sdk_VERSION}.${ifc2x3_sdk_VERSION_PATCH}")

SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_HOME_DIRECTORY}/CMake )

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
IF(WIN32)
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
ELSE(WIN32)
    SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib${LIB_POSTFIX})
ENDIF(WIN32)

SET(CMAKE_DEBUG_POSTFIX "_debug")

if(NOT WIN32)
	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE "Release")
	endif()
	message(STATUS "Build type : ${CMAKE_BUILD_TYPE}")
endif()

SET_PROPERTY(DIRECTORY ${CMAKE_HOME_DIRECTORY} APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG "LOG_INFO_ENABLE")
SET_PROPERTY(DIRECTORY ${CMAKE_HOME_DIRECTORY} APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE "LOG_WARNING_ENABLE")

IF(APPLE)
	IF (REAL_INSTALL_PREFIX)
		SET(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
		MESSAGE(STATUS "Setting CMAKE_INSTALL_NAME_DIR to ${REAL_INSTALL_PREFIX}")
		SET(CMAKE_INSTALL_NAME_DIR "${REAL_INSTALL_PREFIX}")
		SET(CMAKE_INSTALL_RPATH "${REAL_INSTALL_PREFIX}")
	ELSE (REAL_INSTALL_PREFIX)
		SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}")
	ENDIF (REAL_INSTALL_PREFIX)
    # include(CheckCXXCompilerFlag) 
    # CHECK_CXX_COMPILER_FLAG(-stdlib=libc++ CLANG_CXX_FLAG)
    # if(CLANG_CXX_FLAG)  
    #     message(STATUS "Adding -stdlib=libc++ to CMAKE_CXX_FLAGS")  
    #     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")   
    #     endif()                                                  
ENDIF(APPLE)


IF(MSVC)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t- /bigobj")
ENDIF(MSVC)

include(${CMAKE_HOME_DIRECTORY}/PCHSupport.cmake)
if(PCHSupport_FOUND)
    option(ENABLE_PRECOMPILED_HEADER "Enable use of precompiled header to improve compile time" ON)
endif()

include_directories(${CMAKE_HOME_DIRECTORY}/include)

add_subdirectory(src)
add_subdirectory(doc EXCLUDE_FROM_ALL)
add_subdirectory(examples)  

IF(IS_DIRECTORY ${CMAKE_HOME_DIRECTORY}/tests)
  ENABLE_TESTING()
  IF(UNIX)
     set(CMAKE_C_FLAGS_PROFILING "-g -O0 -Wall -W -Wshadow -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wwrite-strings -fprofile-arcs -ftest-coverage" CACHE STRING "Profiling Compiler Flags")
     set(CMAKE_CXX_FLAGS_PROFILING "-g -O0 -Wall -W -Wshadow -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wwrite-strings -fprofile-arcs -ftest-coverage" CACHE STRING "Profiling Compiler Flags")
     set(CMAKE_SHARED_LINKER_FLAGS_PROFILING " -fprofile-arcs -ftest-coverage" CACHE STRING "Profiling Linker Flags")
     set(CMAKE_MODULE_LINKER_FLAGS_PROFILING " -fprofile-arcs -ftest-coverage" CACHE STRING "Profiling Linker Flags")
     set(CMAKE_EXEC_LINKER_FLAGS_PROFILING " -fprofile-arcs -ftest-coverage" CACHE STRING "Profiling Linker Flags")
  ENDIF(UNIX)  

  add_subdirectory(tests)
ENDIF(IS_DIRECTORY ${CMAKE_HOME_DIRECTORY}/tests)



#Create a package

INCLUDE(InstallRequiredSystemLibraries)
# If the cmake version includes cpack, use it
IF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
  SET(CPACK_PACKAGE_NAME "ifc2x3")
  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "IFC 2x3 SDK")
  SET(CPACK_PACKAGE_VENDOR "CSTB")
  SET(CPACK_PACKAGE_CONTACT "Mathieu Marache <mathieu.marache@cstb.fr>")
  SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt")
  SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Licence.txt")
  SET(CPACK_PACKAGE_VERSION_MAJOR "${ifc2x3_sdk_VERSION_MAJOR}")
  SET(CPACK_PACKAGE_VERSION_MINOR "${ifc2x3_sdk_VERSION_MINOR}")
  SET(CPACK_PACKAGE_VERSION_PATCH "${ifc2x3_sdk_VERSION_PATCH}")
  IF(NOT DEFINED CPACK_SYSTEM_NAME)
    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)
   IF(UNIX)
      SET(CPACK_GENERATOR DEB)
      SET(CPACK_DEB "ON")
      SET(CPACK_SOURCE_GENERATOR "")
      SET(CPACK_SOURCE_TBZ2 "OFF")
      SET(CPACK_SOURCE_TGZ "OFF")
      SET(CPACK_SOURCE_TZ "OFF")
      SET(DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.7-9), libstdc++6 (>= 4.2.3-2), libgcc1 (>= 1:4.2.3-2)")
      SET(CPACK_SET_DESTDIR ON)
      SET(CPACK_STGZ "OFF")
      SET(CPACK_TBZ2 "OFF")
      SET(CPACK_TGZ "OFF")
      SET(CPACK_TZ "OFF")
      SET(CPACK_ZIP "OFF")
   ENDIF(UNIX)
   INCLUDE(CPack)   
ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")

